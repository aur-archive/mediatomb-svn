--- libmp4v2_handler.cc	2009-03-07 15:54:06.389655725 +1300
+++ libmp4v2_handler.cc.new	2009-03-07 16:40:27.332059869 +1300
@@ -130,6 +130,71 @@
     }
 }
 
+static void addAuxField(String desiredFrame, MP4FileHandle mp4, Ref<CdsItem> item) {
+    char* mp4_retval = NULL;
+    u_int16_t number = 0;
+    u_int16_t total_number = 0;
+    u_int8_t cpl = 0;
+
+    if (desiredFrame == "TCOM")
+    {
+        MP4GetMetadataWriter(mp4, &mp4_retval);
+    }
+    else if (desiredFrame == "TENC")
+    {
+        MP4GetMetadataTool(mp4, &mp4_retval);
+    }
+    else if (desiredFrame == "TRCK")
+    {
+        MP4GetMetadataTrack(mp4, &number, &total_number);
+    }
+    else if (desiredFrame == "TPOS")
+    {
+        MP4GetMetadataDisk(mp4, &number, &total_number);
+    }
+    else if (desiredFrame == "TIT1")
+    {
+        MP4GetMetadataGrouping(mp4, &mp4_retval);
+    }
+    else if (desiredFrame == "TBPM")
+    {
+        MP4GetMetadataTempo(mp4, &number);
+    }
+    else if (desiredFrame == "TCMP")
+    {
+        MP4GetMetadataCompilation(mp4, &cpl);
+        mp4_retval = strdup(cpl ? "1" : "0");
+    }
+    else if (desiredFrame == "TPE2" || desiredFrame == "TPE4")
+    {
+        MP4GetMetadataAlbumArtist(mp4, &mp4_retval);
+    }
+
+    String value;
+    Ref<StringConverter> sc = StringConverter::i2i();
+
+    if (number > 0)
+    {
+        value = String::from(number);
+        if (total_number > 0)
+            value = value + "/" + String::from(total_number);
+    }
+    else if (mp4_retval)
+    {
+        value = String(mp4_retval);
+        free(mp4_retval);
+    }
+
+    value = trim_string(value);
+
+    if (string_ok(value))
+    {
+        value = sc->convert(value);
+        log_debug("Adding frame: %s with value %s\n", desiredFrame.c_str(), value.c_str());
+        item->setAuxData(desiredFrame, value);
+    }
+}
+
 void LibMP4V2Handler::fillMetadata(Ref<CdsItem> item)
 {
     MP4FileHandle mp4;
@@ -148,7 +213,18 @@
         for (int i = 0; i < M_MAX; i++)
             addMetaField((metadata_fields_t) i, mp4, item);
 
+        Ref<StringConverter> sc = StringConverter::m2i();
         Ref<ConfigManager> cm = ConfigManager::getInstance();
+        Ref<Array<StringBase> > aux = cm->getStringArrayOption(CFG_IMPORT_LIBOPTS_ID3_AUXDATA_TAGS_LIST);
+        if (aux != nil)
+        {
+            for (int j = 0; j < aux->size(); j++)
+            {
+                String desiredFrame(aux->get(j));
+                if (string_ok(desiredFrame))
+                    addAuxField(desiredFrame, mp4, item);
+            }
+        }
 
         //  MP4GetTimeScale returns the time scale in units of ticks per 
         //  second for the mp4 file. Caveat: tracks may use the same time 
